关于 cmake 的构建系统和维护。

    VimE 目前是基于模块化设计的。这是符合 VimE 之前的总体设计的。但是我们发现
在 Unix 上面，实际上是有现成的模块化支持的。也就是说，我们可以把 VimE 链接成一
个大的程序，然后把模块连接成一个小的 so 文件。但是，这个小的 so 文件能够使用大
的二进制文件中提供的服务。这在 Windows 上面是很难做到的。

    因此，我决定学习 llvm 的构建系统。基于 cmake，提供高跨平台能力的 VimE 构建
方式。

    目前的构建方式被划分到几个模块里面，自底向上是这样的：

    最底层的，包含源代码的目录都必须包含一个叫做CMakeLists.txt的文件。根据要生
成的目标的不同，这个文件中会有几个叫做add_vime_*的函数调用：目前的调用有这么几
个：

    - add_vime_library : 添加源文件，生成一个静态库。
    - add_vime_loadable_mode ：添加源文件，生成一个动态库。
    - add_vime_executable ：添加源文件，生成一个可执行程序。
    - add_vime_tool ：添加源文件，生成一个工具程序
    - add_vime_example ：添加源文件，生成一个演示程序

    注意，这些函数都会对参数中的源文件进行检查，如果添加进去的文件列表里面的文
件少于该目录中存在的文件，会产生 SEND_ERROR 错误信息。

    在最高层，项目根目录下也存在一个 CMakeLists.txt 文件。这个文件被用来处理一
些编译时的选项开关和一些全局相关的选项。然后，这个文件作出的最重要的事情之一是
包含了 config-ix.cmake 文件。我们的主要工作是在这个文件中完成的。最后，这个文
件会把包含源代码的路径添加进 cmake 搜索的子目录中。如果需要在 lib文件夹下添加
一个子文件夹，则必须在这里添加一个 add_subdirectory 函数调用。

    顶层的 CMakeLists.txt 文件还负责包含 AddVimE.cmake 文件。上面的 add_vime_*
宏都是在这里被定义的。如果需要修改相关的编译措施，可以在这里进行修改。

    config-ix.cmake 包含了所有的编译时库依赖检测、环境检测和特性选项等等。文件
的第一部分用于检查必要的包含文件、库和必须的函数。文件的第二部分用于检测特性选
项。最后一部分用于环境检测。如果需要添加新的库依赖，可以在这里修改。


    目前还有一些东西没有完成。比方说全局的库依赖等等。也许还需要设计一套新的
API，不过目前的也就够用了。
