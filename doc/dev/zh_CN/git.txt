关于 git 系统的使用

    git 版本管理系统十分优秀，支持很多种模式的开发。我们使用 git 系统必须要有
一定的规章制度，否则会把提交历史弄乱（就像现在的提交历史一样= =）。


1. 获得软件源代码，参与开发

    首先，要参加开发，必须得到本项目的代码仓库，主仓库位于
git://github.com/starwing/VimE.git 你可以使用 git clone 命令获取所有的源代码。
但如果想参与开发，最好的办法步骤如下：

    1.1 如果你还没有加入 vime_dev_cn 邮件列表，请向
vime_dev_cn+subscribe@googlegroups.com 地址写一封信，内容为空。然后你就加入我
们的邮件列表了。

    1.2 然后，你需要先注册一个 github 的账号，并在邮件列表写信，通知我们。我会
将你加入 github starwing/VimE 项目的协作者中。

    1.3 现在，你就可以通过 git clone 来复制源代码了。

2. 本地的 git 使用方法。

    首先，在编辑源代码之前，你必须知道自己要做什么。在做任何事情之前，请建立一
个新的分支，根据目的的不同，分支的名称也不一样（注意，这是你的本地分支，因此不
会出现在服务器上）。

      - 如果你希望修改文档，可以使用命令 git checkout -b doc。
      - 如果你希望修改 api 的接口，可以使用命令 git checkout -b api，注意，修
	改 api 接口是非常危险的行为！在将修改合并进你的master分支前，确定你在
	api 上确实可以编译并获得可执行文件。

      - 如果你希望添加一个特性，可以在分之前使用 feat_ 前缀。

    总之，不要试图修改 master 分支，而是建立一个新的分支，修改这个分支。在所有
的修改完成后，你可以使用 git merge 命令来将这个分支合并到 master 上面去。


3. 提交更改。

    在提交之前，确定你已经申请了一个 ssh_key，并按照 github 的说明将这个 key
设置到你在 github 的账号中了，然后，你就可以把你在本地的代码 push 到服务器端了
。这里有两个策略：

    1. 推荐的策略，你可以直接 fork 我们的项目，然后 push 到你自己的软件仓库的
       master 分支。然后给邮件列表发送邮件，申请将修改并入主 master 分支（或者
       也可以等待我们注意到你的提交……虽然这样比较被动）。
    2. 你也不必 fork 我们的项目。当源代码修改以后，你直接可以 push 到我们的一
       个分支（这个地方不确定……详情要试过以后才知道），但是请绝对不要 push
       到服务器端的 master 分支。请使用你的用户名（或者你自己起个昵称）建立一
       个服务器端分支。具体的操作方法是这样的：

            # 首先添加软件仓库：
            git add origin git://github.com/starwing/VimE.git
            git push origin master:nick

        注意 add 的操作只需要做一次。之后你可以使用 git remote 命令查看所有的
        软件仓库的列表。你需要每次都使用 master:nick 这个语法，其中 nick 是你
        选择的昵称（千万注意不要和别人的重复！），如果你不想每次都这么麻烦，可
        以在本地也建立 nick 分支：

            git checkout -b nick

    在提交修改以后，耐心等待我们将你的贡献合并入主仓库（或者在邮件列表提交
pull 申请）。但我们（主要是我）会用自己的分支 merge 你的修改，然后测试，在测试
以后我们会将你的贡献合并入 master 分支。

    记住，别猜测别人工作的进度，只有 master 分支的代码才是稳定的。其余所有的分
支你都应该认为是别人的隐私。


4. 解决冲突

    有的时候，当你 push 的时候，服务器端会提醒你服务器端已经更新，这时你需要先
从服务器端 pull 我们的修改，然后进行 merge，在 merge 的时候，是极有可能会遇到
冲突的。这时可以用 git status 查看具体的冲突位置，并用你喜欢的编辑器解决冲突代
码。最后用 git add 将解决后的代码加入 stage。最后你就可以用 git commit 提交合
并了。如果你是直接 fork 我们的代码，可能会在 push 的时候遇到这个问题。如果你是
建立一个新的分区，我们还不确定会不会遇到这个问题…………


总结：
    git 的使用需要大量的经验，然而我们很缺乏使用经验。因此在大量的使用下，应该
会有明显的改善。项目刚开始也是一个学习的过程。希望我们能共同提高。
